How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It helps you see all the changes. If you start with a working file and then
    it breaks, the broken part must have been introduced with the change.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    You can see what has been tried before or how a file used to work, or how a
    file has evolved over time

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros of manually choosing:
      + Can pick the right size of commit
      + Can ensure that any version committed works (no partial commits)
    Cons of manually choosing:
      - If you have issues, you may forget to commit and lose changes
      - If too long of automatic save interval, may commit too many changes
      at the same time

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Software projects often have edits made across files at the same time. It's
    necessary to save changes to multiple files at the same time to save a new
    working version of the entire program. Google Docs doesn't often have
    dependencies between files so it is less important for it to track changes
    across files at the same time.

How can you use the commands git log and git diff to view the history of files?

    Use git log to see what commits have been made and the summary of their
    changes. Use git diff to see the exact line changes between two files.

How might using version control make you more confident to make changes that
could break something?

    Because if you break something you can always see when you broke it and
    fix the bug. Since you can see when you introduced it, you can use diffs
    to identify it (by diffing the last version that worked properly against
    the subsequent version) and then fix it in a more recent version.

Now that you have your workspace set up, what do you want to try using Git for?

    Working on a project while being able to see where I introduced various
    features (and, undoubtedly, bugs)
