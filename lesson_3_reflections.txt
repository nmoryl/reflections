When would you want to use a remote repository rather than keeping all your work
local?

  When you are using multiple machines for development or if you are developing
  as part of a team. You may also want a remote repository for disaster
  recovery or backup purposes.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

  Because if someone else pushes changes to your remote repository that may
  break your work-in-progress.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

  You would fork a repository that you don't own but want to modify for your
  own purposes; and that repository is available on GitHub. (Forking is a
  GitHub-specific concept.) You would clone a repository if you want to create
  a copy of it. You would clone after a fork, for example, if you want to
  develop on a repository that you don't own (most people don't develop in
  the cloud, though that may change.) There are instances where you would clone
  on your own machine, but I'm not currently familiar with those use cases.
  You create a branch to develop on a repository you own. That repo could be a
  remote one or a local one.

What is the benefit of having a copy of the last known state of the remote
stored locally?

  So you can resolve how far your local copy has diverged from last known
  remote copy

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

  You could send files back and forth instead and manually merge and resolve
  differences. It would be slower and more error-prone. It would only be
  easier inasmuch as it means people don't have to learn a new tool.
