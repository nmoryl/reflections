What happens when you initialize a repository? Why do you need to do it?

  When you initialize a repository, git knows it needs to track it. By default,
  a folder is not tracked. Git doesn't automatically track things or save
  changes. You can have folders anywhere on your computer that you are
  tracking through git. They don't all have to be in the same parent directory.
  You need to initialize a repository for git to track the version history of
  a directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  It allows you time to consider and review what you want to track before
  committing it.

How can you use the staging area to make sure you have one commit per logical
change?

  You can commit multiple files at the same time so if a logical change
  spans multiple files you can update all of them concurrently.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  Branches would help if you're trying to test a major new feature. Any
  sufficiently advanced new feature would need to be built and tested in
  stages, which means multiple commits, so branching would be essential to
  keeping good version hygiene while being able to make progress.

How do the diagrams help you visualize the branch structure?

  They help me understand how commits relate to each other through time and
  where branches share history or don't share history, and where development
  diverges.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  Merging two branches includes both of their updates and changes. We represent
  it the way we do because we keep the full history of both branches when we
  do so.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

  Pros of automatic merging:
   + Maintains change history
   + Automatically identifies conflicts fairly well (though not perfectly)
   + Faster

  Cons of automatic merging:
   - Less control
   - Can break if there are conflicts, but + identifies conflicts and gives you
     an opportunity to resolve them
